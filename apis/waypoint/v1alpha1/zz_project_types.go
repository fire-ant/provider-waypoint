/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataSourceGitObservation struct {

	// Indicates signal to be sent to any applications when their config files change.
	FileChangeSignal *string `json:"fileChangeSignal,omitempty" tf:"file_change_signal,omitempty"`

	// Path in git repository when waypoint.hcl file is stored in a sub-directory
	GitPath *string `json:"gitPath,omitempty" tf:"git_path,omitempty"`

	// Interval at which Waypoint should poll git repository for changes
	GitPollIntervalSeconds *float64 `json:"gitPollIntervalSeconds,omitempty" tf:"git_poll_interval_seconds,omitempty"`

	// Git repository ref containing waypoint.hcl file
	GitRef *string `json:"gitRef,omitempty" tf:"git_ref,omitempty"`

	// Url of git repository storing the waypoint.hcl file
	GitURL *string `json:"gitUrl,omitempty" tf:"git_url,omitempty"`

	// Whether Waypoint ignores changes outside path storing waypoint.hcl file
	IgnoreChangesOutsidePath *bool `json:"ignoreChangesOutsidePath,omitempty" tf:"ignore_changes_outside_path,omitempty"`
}

type DataSourceGitParameters struct {

	// Indicates signal to be sent to any applications when their config files change.
	// +kubebuilder:validation:Optional
	FileChangeSignal *string `json:"fileChangeSignal,omitempty" tf:"file_change_signal,omitempty"`

	// Path in git repository when waypoint.hcl file is stored in a sub-directory
	// +kubebuilder:validation:Optional
	GitPath *string `json:"gitPath,omitempty" tf:"git_path,omitempty"`

	// Interval at which Waypoint should poll git repository for changes
	// +kubebuilder:validation:Optional
	GitPollIntervalSeconds *float64 `json:"gitPollIntervalSeconds,omitempty" tf:"git_poll_interval_seconds,omitempty"`

	// Git repository ref containing waypoint.hcl file
	// +kubebuilder:validation:Optional
	GitRef *string `json:"gitRef,omitempty" tf:"git_ref,omitempty"`

	// Url of git repository storing the waypoint.hcl file
	// +kubebuilder:validation:Optional
	GitURL *string `json:"gitUrl,omitempty" tf:"git_url,omitempty"`

	// Whether Waypoint ignores changes outside path storing waypoint.hcl file
	// +kubebuilder:validation:Optional
	IgnoreChangesOutsidePath *bool `json:"ignoreChangesOutsidePath,omitempty" tf:"ignore_changes_outside_path,omitempty"`
}

type GitAuthBasicObservation struct {

	// Git username
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GitAuthBasicParameters struct {

	// Git password
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Git username
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type GitAuthSSHObservation struct {

	// Git user associated with private key
	GitUser *string `json:"gitUser,omitempty" tf:"git_user,omitempty"`
}

type GitAuthSSHParameters struct {

	// Git user associated with private key
	// +kubebuilder:validation:Optional
	GitUser *string `json:"gitUser,omitempty" tf:"git_user,omitempty"`

	// Passphrase to use with private key
	// +kubebuilder:validation:Optional
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// Private key to authenticate to Git
	// +kubebuilder:validation:Required
	SSHPrivateKeySecretRef v1.SecretKeySelector `json:"sshPrivateKeySecretRef" tf:"-"`
}

type ProjectObservation struct {

	// Application status poll interval in seconds
	AppStatusPollSeconds *float64 `json:"appStatusPollSeconds,omitempty" tf:"app_status_poll_seconds,omitempty"`

	// Configuration of Git repository where waypoint.hcl file is stored
	DataSourceGit []DataSourceGitObservation `json:"dataSourceGit,omitempty" tf:"data_source_git,omitempty"`

	// Basic authentication details for Git consisting of `username` and `password`
	GitAuthBasic []GitAuthBasicObservation `json:"gitAuthBasic,omitempty" tf:"git_auth_basic,omitempty"`

	// SSH authentication details for Git
	GitAuthSSH []GitAuthSSHObservation `json:"gitAuthSsh,omitempty" tf:"git_auth_ssh,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the Waypoint project
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// List of variables in Key/value pairs associated with the Waypoint Project
	ProjectVariables map[string]*string `json:"projectVariables,omitempty" tf:"project_variables,omitempty"`

	// Enable remote runners for project
	RemoteRunnersEnabled *bool `json:"remoteRunnersEnabled,omitempty" tf:"remote_runners_enabled,omitempty"`
}

type ProjectParameters struct {

	// Application status poll interval in seconds
	// +kubebuilder:validation:Optional
	AppStatusPollSeconds *float64 `json:"appStatusPollSeconds,omitempty" tf:"app_status_poll_seconds,omitempty"`

	// Configuration of Git repository where waypoint.hcl file is stored
	// +kubebuilder:validation:Optional
	DataSourceGit []DataSourceGitParameters `json:"dataSourceGit,omitempty" tf:"data_source_git,omitempty"`

	// Basic authentication details for Git consisting of `username` and `password`
	// +kubebuilder:validation:Optional
	GitAuthBasic []GitAuthBasicParameters `json:"gitAuthBasic,omitempty" tf:"git_auth_basic,omitempty"`

	// SSH authentication details for Git
	// +kubebuilder:validation:Optional
	GitAuthSSH []GitAuthSSHParameters `json:"gitAuthSsh,omitempty" tf:"git_auth_ssh,omitempty"`

	// The name of the Waypoint project
	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// List of variables in Key/value pairs associated with the Waypoint Project
	// +kubebuilder:validation:Optional
	ProjectVariables map[string]*string `json:"projectVariables,omitempty" tf:"project_variables,omitempty"`

	// Enable remote runners for project
	// +kubebuilder:validation:Optional
	RemoteRunnersEnabled *bool `json:"remoteRunnersEnabled,omitempty" tf:"remote_runners_enabled,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Project is the Schema for the Projects API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,waypoint}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dataSourceGit)",message="dataSourceGit is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectName)",message="projectName is a required parameter"
	Spec   ProjectSpec   `json:"spec"`
	Status ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
