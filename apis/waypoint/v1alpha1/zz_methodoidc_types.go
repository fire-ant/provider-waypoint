/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MethodOidcObservation struct {
	AccessorSelector *string `json:"accessorSelector,omitempty" tf:"accessor_selector,omitempty"`

	// Allowed URI for auth redirection.
	AllowedRedirectUrls []*string `json:"allowedRedirectUrls,omitempty" tf:"allowed_redirect_urls,omitempty"`

	// The optional audience claims required
	Auds []*string `json:"auds,omitempty" tf:"auds,omitempty"`

	// Mapping of a claim to a variable value for the access selector
	ClaimMappings map[string]*string `json:"claimMappings,omitempty" tf:"claim_mappings,omitempty"`

	// Client ID of OIDC provider
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Description of auth method
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Optional CA certificate chain to validate the discovery URL. Multiple CA certificates can be specified to support easier rotation
	DiscoveryCAPem []*string `json:"discoveryCaPem,omitempty" tf:"discovery_ca_pem,omitempty"`

	// Discovery URL for OIDC provider
	DiscoveryURL *string `json:"discoveryUrl,omitempty" tf:"discovery_url,omitempty"`

	// Friendly display name of OIDC auth method
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Same as claim-mapping but for list values
	ListClaimMappings map[string]*string `json:"listClaimMappings,omitempty" tf:"list_claim_mappings,omitempty"`

	// The optional claims scope requested.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The signing algorithms supported by the OIDC connect server. If this isn't specified, this will default to RS256 since that should be supported according to the RFC. The string values here should be valid OIDC signing algorithms
	SigningAlgs []*string `json:"signingAlgs,omitempty" tf:"signing_algs,omitempty"`
}

type MethodOidcParameters struct {

	// +kubebuilder:validation:Optional
	AccessorSelector *string `json:"accessorSelector,omitempty" tf:"accessor_selector,omitempty"`

	// Allowed URI for auth redirection.
	// +kubebuilder:validation:Optional
	AllowedRedirectUrls []*string `json:"allowedRedirectUrls,omitempty" tf:"allowed_redirect_urls,omitempty"`

	// The optional audience claims required
	// +kubebuilder:validation:Optional
	Auds []*string `json:"auds,omitempty" tf:"auds,omitempty"`

	// Mapping of a claim to a variable value for the access selector
	// +kubebuilder:validation:Optional
	ClaimMappings map[string]*string `json:"claimMappings,omitempty" tf:"claim_mappings,omitempty"`

	// Client ID of OIDC provider
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// client secret for OIDC provider
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// Description of auth method
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Optional CA certificate chain to validate the discovery URL. Multiple CA certificates can be specified to support easier rotation
	// +kubebuilder:validation:Optional
	DiscoveryCAPem []*string `json:"discoveryCaPem,omitempty" tf:"discovery_ca_pem,omitempty"`

	// Discovery URL for OIDC provider
	// +kubebuilder:validation:Optional
	DiscoveryURL *string `json:"discoveryUrl,omitempty" tf:"discovery_url,omitempty"`

	// Friendly display name of OIDC auth method
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Same as claim-mapping but for list values
	// +kubebuilder:validation:Optional
	ListClaimMappings map[string]*string `json:"listClaimMappings,omitempty" tf:"list_claim_mappings,omitempty"`

	// The optional claims scope requested.
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The signing algorithms supported by the OIDC connect server. If this isn't specified, this will default to RS256 since that should be supported according to the RFC. The string values here should be valid OIDC signing algorithms
	// +kubebuilder:validation:Optional
	SigningAlgs []*string `json:"signingAlgs,omitempty" tf:"signing_algs,omitempty"`
}

// MethodOidcSpec defines the desired state of MethodOidc
type MethodOidcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MethodOidcParameters `json:"forProvider"`
}

// MethodOidcStatus defines the observed state of MethodOidc.
type MethodOidcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MethodOidcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MethodOidc is the Schema for the MethodOidcs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,waypoint}
type MethodOidc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.allowedRedirectUrls)",message="allowedRedirectUrls is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientId)",message="clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.discoveryUrl)",message="discoveryUrl is a required parameter"
	Spec   MethodOidcSpec   `json:"spec"`
	Status MethodOidcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MethodOidcList contains a list of MethodOidcs
type MethodOidcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MethodOidc `json:"items"`
}

// Repository type metadata.
var (
	MethodOidc_Kind             = "MethodOidc"
	MethodOidc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MethodOidc_Kind}.String()
	MethodOidc_KindAPIVersion   = MethodOidc_Kind + "." + CRDGroupVersion.String()
	MethodOidc_GroupVersionKind = CRDGroupVersion.WithKind(MethodOidc_Kind)
)

func init() {
	SchemeBuilder.Register(&MethodOidc{}, &MethodOidcList{})
}
