/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProfileObservation struct {

	// Indicates if this runner profile is the default for any new projects
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// Any env vars that should be exposed to the on demand runner.
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// oci_url is the OCI image that will be used to boot the on demand runner.
	OciURL *string `json:"ociUrl,omitempty" tf:"oci_url,omitempty"`

	// plugin config is the configuration for the plugin that is created. It is usually HCL and is decoded like the other plugins, and is plugin specific.
	PluginConfig *string `json:"pluginConfig,omitempty" tf:"plugin_config,omitempty"`

	// config format specifies the format of plugin_config.
	PluginConfigFormat *float64 `json:"pluginConfigFormat,omitempty" tf:"plugin_config_format,omitempty"`

	// Plugin type for runner i.e docker / kubernetes / aws-ecs.
	PluginType *string `json:"pluginType,omitempty" tf:"plugin_type,omitempty"`

	// The ID of the target runner for this profile.
	TargetRunnerID *string `json:"targetRunnerId,omitempty" tf:"target_runner_id,omitempty"`

	// A map of labels on target runners
	TargetRunnerLabels map[string]*string `json:"targetRunnerLabels,omitempty" tf:"target_runner_labels,omitempty"`
}

type ProfileParameters struct {

	// Indicates if this runner profile is the default for any new projects
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// Any env vars that should be exposed to the on demand runner.
	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// oci_url is the OCI image that will be used to boot the on demand runner.
	// +kubebuilder:validation:Optional
	OciURL *string `json:"ociUrl,omitempty" tf:"oci_url,omitempty"`

	// plugin config is the configuration for the plugin that is created. It is usually HCL and is decoded like the other plugins, and is plugin specific.
	// +kubebuilder:validation:Optional
	PluginConfig *string `json:"pluginConfig,omitempty" tf:"plugin_config,omitempty"`

	// config format specifies the format of plugin_config.
	// +kubebuilder:validation:Optional
	PluginConfigFormat *float64 `json:"pluginConfigFormat,omitempty" tf:"plugin_config_format,omitempty"`

	// Plugin type for runner i.e docker / kubernetes / aws-ecs.
	// +kubebuilder:validation:Optional
	PluginType *string `json:"pluginType,omitempty" tf:"plugin_type,omitempty"`

	// The ID of the target runner for this profile.
	// +kubebuilder:validation:Optional
	TargetRunnerID *string `json:"targetRunnerId,omitempty" tf:"target_runner_id,omitempty"`

	// A map of labels on target runners
	// +kubebuilder:validation:Optional
	TargetRunnerLabels map[string]*string `json:"targetRunnerLabels,omitempty" tf:"target_runner_labels,omitempty"`
}

// ProfileSpec defines the desired state of Profile
type ProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProfileParameters `json:"forProvider"`
}

// ProfileStatus defines the observed state of Profile.
type ProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Profile is the Schema for the Profiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,waypoint}
type Profile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProfileSpec   `json:"spec"`
	Status            ProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProfileList contains a list of Profiles
type ProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Profile `json:"items"`
}

// Repository type metadata.
var (
	Profile_Kind             = "Profile"
	Profile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Profile_Kind}.String()
	Profile_KindAPIVersion   = Profile_Kind + "." + CRDGroupVersion.String()
	Profile_GroupVersionKind = CRDGroupVersion.WithKind(Profile_Kind)
)

func init() {
	SchemeBuilder.Register(&Profile{}, &ProfileList{})
}
